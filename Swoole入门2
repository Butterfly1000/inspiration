☆ new Swoole\Server(string $host,int $port,int $mode = SWOOLE_PROCESS,int $sockType = SWOOLE_SOCK_TCP);

参数
string $host = '0.0.0.0', #监听ip地址


int $port = 0,  #端口号

int $mode = SWOOLE_PROCESS, #指定运行模式 默认值：SWOOLE_PROCESS 多进程模式（默认）；其它值：SWOOLE_BASE 基本模式

int $sockType = SWOOLE_SOCK_TCP
指定这组 Server 的类型
默认值:无
其它值：
SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
SWOOLE_UNIX_DGRAM unix socket dgram
SWOOLE_UNIX_STREAM unix socket stream

$ser = new Swoole\Server("0.0.0.0",9503,SWOOLE_PROCESS,SWOOLE_SOCK_TCP);

☆ set()
Swoole\Server->set(array $setting): void;

$server->set(array(
    'reactor_num'   => 2,     // reactor thread num
    'worker_num'    => 4,     // worker process num
    'backlog'       => 128,   // listen backlog
    'max_request'   => 50,
    'dispatch_mode' => 1,
));

Nginx分为Single和Master两种进程模型。Single模型即为单进程方式工作，具有较差的容错能力，不适合生产之用。Master模型即为一个master进程+N个worker进程
的工作方式。生产环境都是用master-worker模型来工作。

master进程和worker进程，这两个nginx进程都有各自的作用，见名知意, "worker"进程天生就是来"干活"的，真正负责处理请求的进程就是你看到的"worker"进程，
那么"master"进程有什么用呢? “master"进程其实是负责管理"worker"进程的，除了管理"worker"进程，"master"进程还负责读取配置文件、判断配置文件语法的工
作，“master进程"也叫"主进程”，在nginx中，"master"进程只能有一个,而"worker"进程可以有多个。

◆参数1：reactor_num   #Reactor 线程数
Reactor 线程是在 Master 进程中创建的线程
负责维护客户端 TCP 连接、处理网络 IO、处理协议、收发数据
不执行任何 PHP 代码
将 TCP 客户端发来的数据缓冲、拼接、拆分成完整的一个请求数据包

◆参数2：reactor_num   #Worker 进程数
Worker 进程接受由 Reactor 线程投递的请求数据包，并执行 PHP 回调函数处理数据
生成响应数据并发给 Reactor 线程，由 Reactor 线程发送给 TCP 客户端
可以是异步非阻塞模式，也可以是同步阻塞模式
Worker 以多进程的方式运行

☆ on() 注册 Server 的事件回调函数。
Swoole\Server->on(string $event, mixed $callback): void

注意：重复调用 on 方法时会覆盖上一次的设定

参数1：string $event
功能：回调事件名称
默认值：无
其它值：无

参数2：int $callback
功能：回调函数
默认值：无
其它值：无

☆ addListener() 增加监听的端口。业务代码中可以通过调用 Server->getClientInfo 来获取某个连接来自于哪个端口。
Swoole\Server->addListener(string $host, int $port, $type = SWOOLE_SOCK_TCP): bool|Swoole\Server\Port

注意：
监听 1024 以下的端口需要 root 权限
主服务器是 WebSocket 或 Http 协议，新监听的 TCP 端口默认会继承主 Server 的协议设置。必须单独调用 set 方法设置新的协议才会启用新协议

☆listen()
此方法是 addlistener 的别名。

https://wiki.swoole.com/#/server/init
【参考内容】
https://www.cnblogs.com/slgkaifa/p/6867041.html
https://blog.csdn.net/yrx420909/article/details/104513013/



