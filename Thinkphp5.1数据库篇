Tp5.1相对于tp3.2的查询数据多了一些方法。
tp3.2用的是M方法，而Tp5.1也提供了一个db的助手函数。M('user') -> db('user');
TP5.1 查询解析
★值和列查询
查询某个字段的值可以用
Db::table('think_user')->where('id',1)->value('name');
#这个是值的查询，而且只会获得一个值。 输出:王先生

Db::table('think_user')->where('tpye',1)->column('name'); #列查询
#输出:
array(5) {
  [0] => string(6) "山治"
  [1] => string(6) "索隆"
  [2] => string(6) "路飞"
}

db('bls_user')->where('type',2)->column('name,id,type','id'); #第二个值为key值，如果没有则选择
#输出：
array(5) {
  [2] => array(3) {
    ["id"] => int(2)
    ["name"] => string(6) "山治"
    ["type"] => int(2)
  }
  [3] => array(3) {
    ["id"] => int(3)
    ["name"] => string(6) "索隆"
    ["type"] => int(2)
  }
  [4] => array(3) {
    ["id"] => int(4)
    ["name"] => string(6) "路飞"
    ["type"] => int(2)
  }
}

这个和tp3.2的getField效果相同，getField('id')值和getField('id',true)列;

★数据分批处理（新）
在处理大数据的时候有不错的效果。
Db::table('think_user')->chunk(100, function($users) {
    foreach ($users as $user) {
        //$users就是100条数据集合数组，这边可以进行操作，日志。
    }
});
同时也支持回调方法，
Db::table('think_user')->chunk(100, 'myUserIterator');

处理终止：return false;(标准)当然die和exit()也可以。
支持where查询条件，Db::table('think_user')->where(条件)->chunk(100, 'myUserIterator');
另外指定字段查询和排序方式，
Db::table('think_user')->chunk(100, function($users) {
    // 处理结果集...
    return false;
},'create_time', 'desc');
这边会获取的方式相对就比较奇怪（尽量还是别指定，用id最好，否为如果指定为type【这个方便解释，1,2,3】，或许不同的type获取2个数据，type为1有1个，
type为2有2个，type为3三个，那么出现的数组是两组，第一组type为1一个+type为2一个，第二组type为3两个【默认type已查过，就到type3了】）
，desc(感觉是对create_time和id的双排序，create_time为主)

★大批量数据处理
游标查询功能，该查询方式利用了PHP的生成器特性，可以大幅减少大量数据查询的内存占用问题。
$cursor = Db::table('user')->where('status', 1)->cursor();#
#这边$cursor是个对象(dump不出具体值，只会显示为object)，只有变量foreach后的值才能用dump输出。
foreach($cursor as $user){
	echo $user['name'];
}

★JSON类型数据查询（mysql）
// 查询JSON类型字段 （info字段为json类型）
Db::table('think_user')->where('info->email','thinkphp@qq.com')->find();

Tp5.1添加数据解析
tp5用insert取代add
$data = ['foo' => 'bar', 'bar' => 'foo'];
db('user')->insert($data);
或
db('user')->data($data)->insert($data);

★禁止抛出异常
db('user')->strict(false)->insert($data);

★不存在的字段的值将会直接抛弃(用了mysql的replace方法)
db('user')->insert($data,true);

虽然，tp5.1提供了这两个方法，可以让一些异常不出现，但个人并不支持初级工程师使用，这样会导致一些bug被忽视。

★返回新增数据的自增主键
$userId = Db::name('user')->insertGetId($data);
这边就要提到一个问题了，tp3.2的add新增后会自动返回新增主键，但tp5.1的insert只会返回影响行数，只有用insertGetId才会返回新增主键，且不支持data()。

★添加多条数据
$data = [
    ['foo' => 'bar', 'bar' => 'foo'],
    ['foo' => 'bar1', 'bar' => 'foo1'],
    ['foo' => 'bar2', 'bar' => 'foo2']
];
Db::name('user')->insertAll($data);

★分批写入
$data = [
    ['foo' => 'bar', 'bar' => 'foo'],
    ['foo' => 'bar1', 'bar' => 'foo1'],
    ['foo' => 'bar2', 'bar' => 'foo2']
    ...
];
// 分批写入 每次最多100条数据 (分批写入，但都会写入)
Db::name('user')->data($data)->limit(100)->insertAll();

Tp5.1更新数据解析
tp5.1用update取代了save
Db::name('user')->where('id', 1)->update(['name' => 'thinkphp']);

★自增，自减，sql更新
Db::name('user')
    ->where('id',1)
    ->inc('read_time')
    ->dec('score',3)
    ->exp('name','UPPER(name)')
    ->update();
或
V5.1.7+版本以后，支持使用raw方法进行数据更新(注意版本)
Db::name('user')
    ->where('id', 1)
    ->update([
        'name'		=>	Db::raw('UPPER(name)'),
        'score'		=>	Db::raw('score-3'),
        'read_time'	=>	Db::raw('read_time+1')
    ]);
SQL:UPDATE `think_user`  SET `read_time` = `read_time` + 1 , `score` = `score` - 3 , `name` = UPPER(name)  WHERE  `id` = 1

★更新字段值
Db::name('user')
    ->where('id',1)
    ->setField('name', 'thinkphp');
    
★可以使用setInc/setDec方法自增或自减一个字段的值（ 如不加第二个参数，默认步长为1）。   
Db::name('user')->where('id', 1)->setInc('score');
setInc/setDec支持延时更新，如果需要延时更新则传入第三个参数，下例中延时10秒更新。
Db::name('user')->where('id', 1)->setInc('score', 1, 10);
    
tp5.1删除数据
delete
主键删除
Db::table('think_user')->delete(1);
Db::table('think_user')->delete([1,2,3]);

条件删除
Db::table('think_user')->where('id',1)->delete();
Db::table('think_user')->where('id','<',10)->delete();

无条件删除所有数据
Db::name('user')->delete(true);

TP5.1 JOIN
Db::table('think_artist')
->alias('a')
->join('work w','a.id = w.artist_id')
->join('card c','a.card_id = c.id')
->select();
    


