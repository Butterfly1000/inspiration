这一篇真的内容非常多，整合也挺累的，但还是慢慢讲。综合多方观点，自己提炼，仅供参考。
★sapi（应用程序接口） 
SAPI提供了一个和外部通信的接口，有点类似于socket，使得PHP可以和其他应用进行交互数据（apache,nginx等）。
php默认提供了很多种SAPI，常见的给apache和nginx的php5_module，CGI，给IIS的ISAPI，还有Shell的cli。

★mod_php模式和mod_fastcgi模式
sapi是php提供的统一接口，它提供给了php5_module和cgi等方式供web服务器来链接和解析php代码。

 ◆mod_php模式：
 apache调用php执行的过程如下：
 apache -> httpd -> php5_module -> sapi -> php

 缺点：
 1.mod_php模式是将php模块安装到apache中，所以每一次apache发出的请求，都会产生一条进程，这个进程就完整的包括php的各种运算计算等操作。
   每接收一个请求，都会产生一个进程来连接php通过sapi来完成请求，可想而知，如果一旦用户过多，并发数过多，服务器就会承受不住了。
   
 2.把mod_php编进apache时，出问题时很难定位是php的问题还是apache的问题。

 ◆mod_fastcgi模式
 php的sapi的另一种方式就是提供cgi模式，由于cgi比较老所以就出现了fastcgi来取代它。

 优点：
 1.mod_fastcgi模式则刚刚相反，fastcgi是一个独立与apache和php的独立个体，它随着apache一起启动，生成多个cig模块，等着apache的请求：一有apache发来
  的httpd请求就立马接收过来，通过调用sapi给php，完成运算。而且不会退出。这样就能应对大规模的并发请求，因为web server的要做的事情少了，所以就更快的
  去处理下一个请求，这样并发大大的。

 2.由于apache 与 php 独立了。出问题，很好定位到底是哪里出问题了。这点也是这种模式受欢迎的原因之一。
 
★cgi
CGI全称是“公共网关接口”(Common Gateway Interface)。
CGI是外部应用程序（CGI程序）与Web服务器之间的接口标准，是在CGI程序和Web服务器之间传递信息的规程（规则+流程）。CGI规范允许Web服务器执行外部程序，
并将它们（外部程序）的输出发送给Web浏览器，CGI将Web的一组简单的静态超媒体文档变成一个完整的新的交互式媒体。

简单的说，就是：cgi就是专门用来和web服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（php的fastcgi），cgi程序根据请求提交的参数
作应处理（解析php），然后输出标准的html语句返回给web服服务器，再返回给客户端，这就是普通cgi的工作原理。

优点：
cgi的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给web server和php。他们通过cgi搭线来完成交互动作。这样尽量减少二者的关联，
使他们变得更独立。

缺点：
但是cgi有个蛋疼的地方，就是每一次web请求都会有启动和退出过程，也就是最为人诟病的fork-and-execute模式，这样一在大规模并发下，就死翘翘了。


★fastcgi（升级版cgi）
FastCGI全称 快速公共网关接口(Fast Common Gateway Interface)。 FastCGI像是一个常驻(long-live)型的CGI,只要激活后,它可以一直执行着,
不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。

fastcgi的对进程的管理
首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受
下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会
停掉一些，这样就提高了性能，也节约了资源。

简单的说（总结上面两段），
fastcgi事先就早早的启动好了（master），而且可以启动多个cgi模块（worker），在那里一直运行着等着，等着web发过来的请求，然后再给php解析运算完成
生成html给web后，也不会退出，而且继续等着下一个web请求（常驻）。而且这些cgi的模块启动是可控的，可监测的。

特点：
fastcgi还允许把web server和php运行在不同的主机上，以大规模扩展和改进安全性而不损失生产效率。
>>解析：支持分布式的运算，即FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。(负载均衡)

fastcgi 是一个与平台无关，与语言无关，任何语言只要按照它的接口来实现，就能实现自己语言的fastcgi能力和web server通讯。

★PHP-CGI
php-cgi是PHP自带的cgi协议的解析器，然后通过调用php的php_execute_script函数来解析和运行php脚本。
php-cgi同时实现了cgi和fastcgi两种协议。

不足：
php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启。
直接杀死php-cgi进程，php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑重新生成新的子进程。）

★PHP-FPM（Fastcgi管理器，5.3.3开始被PHP官方收了）
优点:
1.性能更优（比php-cgi）
2.平滑重启，原理：php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以歇着了，通过这种机制来平滑过度。

★问题解答。
fastcgi是一个协议，php-fpm实现了这个协议？
对。

php-fpm是fastcgi进程的管理器，用来管理fastcgi进程的？
对。php-fpm的管理对象是fastcgi。但不能说php-fpm是fastcgi进程的管理器，因为前面说了fastcgi是个协议，似乎没有这么个进程存在，
就算存在php-fpm也管理不了他（至少目前是）。

php-fpm是php内核的一个补丁？
以前是对的。因为最开始的时候php-fpm没有包含在PHP内核里面，要使用这个功能，需要找到与源码版本相同的php-fpm对内核打补丁，然后再编译。后来PHP内核集
成了PHP-FPM之后就方便多了，使用--enalbe-fpm这个编译参数即可。

修改了php.ini配置文件后，没办法平滑重启，所以就诞生了php-fpm？
是的，修改php.ini之后，php-cgi进程的确是没办法平滑重启的。php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以
歇着了，通过这种机制来平滑过度。

PHP-CGI是PHP自带的FastCGI管理器？
那这样的话干吗又弄个php-fpm。
不对。php-cgi只是使用cgi的程序而已。

★简单记忆：
你(PHP)去和爱斯基摩人(web服务器，如 Apache、Nginx)谈生意。

你说中文(PHP代码)，他说爱斯基摩语(C代码)，互相听不懂，怎么办？那就都把各自说的话转换成英语(FastCGI协议)吧。

怎么转换呢？你就要使用一个翻译机(PHP-FPM)
(当然对方也有一个翻译机，那个是他自带的)

我们这个翻译机是最新型的，老式的那个（PHP-CGI）被淘汰了。不过它(PHP-FPM)只有年轻人（Linux系统）会用，老头子们（Windows系统）不会摆弄它，只好继续
用老式的那个。

★PHP CLI模式开发
https://www.cnblogs.com/martinzhang/p/3533604.html

★php-cgi和php-cli的区别
php-cgi实现了FastCGI协议,可以常驻后台,能通过$_COOKIE等超全局变量拿到请求的数据.
php-cli没有实现FastCGI协议,但内置了一个可以处理PHP请求和静态资源的HTTP服务器.
像Swoole这种通过php-cli启动的服务,并没有$_COOKIE这些超全局变量.

★Master-Worker设计模式
https://blog.csdn.net/wendingzhulu/article/details/52708472
https://www.cnblogs.com/Leo_wl/p/5319735.html

原文链接：
https://blog.csdn.net/u011280342/article/details/78121132
https://segmentfault.com/q/1010000000256516
http://www.nowamagic.net/librarys/veda/detail/1319
https://www.zhihu.com/question/268732467
