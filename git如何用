快速入门
假设：远程仓库有，测试环境dev分支，正式环境master分支
任务：开发一个新功能

checkout master分支（从远程复制到本地），new w-func（new一个功能分支）
为什么要从master上面new呢？
1.因为这样new的内容就是master分支内容，方便最后合并到master分支；
2.master分支一般是最纯净的，dev分支还会存在已修改单还未打算上线的内容；
3.从master分支new的内容较为纯净，最后合并到dev基本问题也很少。

在w-func分支上完成功能开发后，merge到dev分支（先切到dev分支，再git merge w-func），然后提交测试。
测试通过，再将w-func分支合并到master分支（先切到master分支，再git merge w-func），上线的话，记得打上tag哦。

commit(记得备注提交原因)+push的操作就简单这样带咯。

推荐链接：https://www.cnblogs.com/jeesezhang/p/4350313.html
》》》》》》》》》》》》》》》》》》》

Git工作流程
Git 作为一个源码管理系统，不可避免涉及到多人协作。
trunk repositroy 树干仓库（理解为总仓库，就是各类分支都在这）
your github repository 你要clone的分支仓库（总仓库中的某个分支仓库，例如：master，dev等等）
local repository 本地仓库

First step
# 获取主干最新代码
$ git checkout master
$ git pull #更新一下内容

# 新建一个开放分支（因为从master切出的分支，所以dev内容在这一刻与master相同）
$ git checkout -b dev

Second step(这边并没有真的提交哦，而且commit只是提交到本地)
$ git add --all
$ git status
$ git commit --verbose

git add 命令的all参数，表示保存所有变化（包括新建、修改和删除）。从Git 2.0开始，all是 git add 的默认参数，所以也可以用 git add . 代替。
git status 命令，用来查看发生变动的文件。
git commit 命令的verbose（冗长的）参数，会列出 diff 的结果。

Third step
提交commit时，必须给出完整扼要的提交信息
提要（可选）
罗列出改动原因、主要变动、以及需要注意的问题。（必须）
网址（可选）

Four step
分支的开发过程中，要经常与主干保持同步。
$ git fetch origin #同步远程服务器上的数据到本地
$ git rebase origin/master #把 origin/master指针移到它最新的位置上

--------------
小插曲：
git fetch origin master //将远程仓库的master分支下载到本地当前branch中
fetch：相当于是从远程获取最新版本到本地，不会自动merge

git log -p master  ..origin/master //比较本地的master分支和origin/master分支的差别

git merge origin/master //进行合并(切换到本地master分支后)
而
git pull origin master //相当于git fetch 和 git merge
git pull：相当于是从远程获取最新版本并merge到本地

git rebase -i //将本地的多次提交合并为一个,以简化提交历史。
git rebase -i HEAD~2  //合并提交 --- 2表示合并两个
本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)

git rebase master //将master最新的分支同步到本地，这个过程可能需要手动解决冲突(如果进行了上一步的话,只用解决一次冲突)
git rebase master---->解决冲突--->git rebase --continue

参考链接：https://blog.csdn.net/nrsc272420199/article/details/85555911

--------------

Five step
分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。
那么，怎样才能将多个commit合并呢？这就要用到 git rebase 命令。
$ git rebase -i origin/master
git rebase命令的i参数表示互动（interactive），这时git会打开一个互动界面，进行下一步操作。

Six step
推送到远程仓库
$ git push --force origin myfeature

》》》》》》》》》》》》》》》》》》》
工作流
1.git flow
项目存在两个长期分支：
主分支master    （用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版）
开发分支develop （用于日常开发，存放最新的开发版）

项目存在三种短期分支：
功能分支（feature branch）
补丁分支（hotfix branch）
预发分支（release branch）

一旦完成开发，它们就会被合并进develop或master，然后被删除。

评价：
Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将master当作默认分支，可是开发是在develop分支进行的，这导致经常要切换分支，
非常烦人。

更大问题在于，这个模式是基于"版本发布"的，目标是一段时间以后产出一个新版本。但是，很多网站项目是"持续发布"，代码一有变动，就部署一次。这时，
master分支和develop分支的差别不大，没必要维护两个长期分支。

2.Github flow
Github flow 是Git flow的简化版，专门配合"持续发布"。它是 Github.com 使用的工作流程。
它只有一个长期分支，就是master，因此用起来非常简单。
第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。

第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。

第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。

第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）

评价：
Github flow 的最大优点就是简单，对于"持续发布"的产品，可以说是最合适的流程。

问题在于它的假设：master分支的更新与产品的发布是一致的。也就是说，master分支的最新代码，默认就是当前的线上代码。

可是，有些时候并非如此，代码合并进入master分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，
master分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于master分支。

上面这种情况，只有master一个主分支就不够用了。通常，你不得不在master分支以外，另外新建一个production分支跟踪线上版本。

3.Gitlab flow
Gitlab flow 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。
它是 Gitlab.com 推荐的做法。
Gitlab flow 的最大原则叫做"上游优先"（upsteam first），即只存在一个主分支master，它是所有其他分支的"上游"。只有上游分支采纳的代码变化，才能应用到其他分支。

Gitlab flow 分成两种情况，适应不同的开发流程。
1."持续发布"的项目，
它建议在master分支以外，再建立不同的环境分支。比如，"开发环境"的分支是master，"预发环境"的分支是pre-production，"生产环境"的分支是production。

开发分支是预发分支的"上游"，预发分支又是生产分支的"上游"。代码的变化，必须由"上游"向"下游"发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到master，确认没有问题，再cherry-pick到pre-production，这一步也没有问题，才进入production。

只有紧急情况，才允许跳过上游，直接合并到下游分支。

参考/转载链接：http://www.ruanyifeng.com/blog/2015/12/git-workflow.html
》》》》》》》》》》》》》》
GitHub的Pull Request

