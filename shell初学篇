【参考/转】http://www.runoob.com/linux/linux-shell.html
打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行。
见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。

#!/bin/bash
echo "Hello World !"

注意 #!/bin/bash 这一行是shell文件默认的首行。(当然也有其他形式)作用：告诉服务器这是个shell文件。
#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。

那么文件写好了，怎么去输出它呢？
方法一:
chmod +x ./test.sh  #使脚本具有执行权限
./test.sh           #执行脚本（要用 ./test.sh 告诉系统说，就在当前目录找。）

方法二:
/bin/sh test.sh
/bin/php test.php

★变量:
your_name="runoob.com"
注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。(划重点)!!!
同时，变量名的命名须遵循如下规则：
命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
中间不能有空格，可以使用下划线（_）。
不能使用标点符号。
不能使用bash里的关键字（可用help命令查看保留关键字）。

有效的 Shell 变量名示例如下：
RUNOOB
LD_LIBRARY_PATH
_var
var2
总结:其实只要不用太奇葩的方式，以基本的命名规范基本不会有问题。

定义变量的时候我们是不加美元符号$的，
但是使用一个定义过的变量，只要在变量名前面加美元符号即可（不可以不加哦，不加视为字符串），
变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界(规范性)。
$skill
${skill}

好吧，除了规范性，加花括号也是有好处的。
skill=‘Java’；
echo "I am good at ${skill}Script"
那么会打印出什么呢？
I am good at JavaScript
这时候如果没加花括号呢？
会去找$skillScript变量，这个变量因为没定义，所以为空。
I am good at

只读变量
#!/bin/bash
myUrl="http://www.google.com"
readonly myUrl     #只读变量
myUrl="http://www.runoob.com"  #这些修改就会报错

删除变量
unset variable_name #这个很简单

★变量类型
运行shell时，会同时存在三种变量：

1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

★Shell 字符串
单引号
这家伙是个一条筋，单引号里面都是字符串，变量无效，直接看成字符串。

双引号
双引号兼容性就很不错了，双引号内允许使用变量

拼接字符串
#! /bin/bash
name='nick';
echo 'Your name is'${name}' ?';
echo "Your name is"${nane}" ?";
echo "Your name is ${nane} ?";

获取字符串长度
string="abcd"
echo ${#string}  #输出 4

提取子字符串
string="runoob is a great site"
echo ${string:1:4}  #输出 unoo ;第1个字符串起（0为起始位），取4位

查找子字符串
查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：
string="runoob is a great site"
echo `expr index "$string" io`  # 输出 4 ;expr表达式 index索引，这个输出值起始位为1

★Shell 数组
bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。

定义数组
在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
形式一：
array=(value0 value1 value2 value3 value4)
array=(
  value0
  value1
  value2
  value3
  value4
)
形式二:
array[0]=value0
array[1]=value2


读取数组
echo ${array[0]}

读取所有数组元素
echo $(array[@])

获取数组的长度
# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}

★Shell 注释
以 # 开头的行就是注释，会被解释器忽略。

多行注释还可以使用以下格式：
:<<EOF
注释内容...
注释内容...
注释内容...
EOF

注意:EOF 也可以使用其他符号


