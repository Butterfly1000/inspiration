★变量名
1.由字母、数字和下划线组成，但不能以数字为开头;
2.区分大小写
3.变量、等号、值中间不能出现任何空格（★）
------------
★shell为弱类型语言（不会强制转换）、脚本一般为解释型语言
示例：
var1=123
var2=256
echo $var1+$var2

结果：123+256   （结果是字符串）
------------
★位置变量（定义：当一条命令或脚本执行时，后面可以跟多个参数，我们使用位置参数变量来表示这些参数）
例：
sh 1.sh hello world 123 456

脚本1.sh引用
$1 hello
$2 world
$3 123
$4 456
$@ hello world 123 456
$* hello world 123 456
$# 4

位置参数变量   含义
$n            n为数字，$0代表脚本本身，$1~$9代表第1~9个参数，10以上的参数需要用大括号包含，如${10}
$@            命令行中所有的参数，不过 $@ 把每个参数区别对待
$*            命令行中所有的参数，把所有的参数看成一个整体
$#            参数的个数

脚本方法同样可以使用 例如：1.sh
#!/bin/bash

#注意如果是add而不是add()，花括号{不能和add相连，否则会报错，应该中间空格或者{放在下一行。
function add
{
    value=`expr $1 + $2` #如果$1+$2连在一起就是字符串了
    echo $value
}
add 123 456

执行：sh 1.sh
结果：579
----------------------------
★预定义变量
预定义变量是在 Shell 一开始时就定义的变量，这一点和默认环境变量有些类似。不同的是，预定义变量不能重新定义，用户只能根据 Shell 的定义来使用这些变量。
预定义变量    作 用
$?           最后一次执行的命令的返回状态。如果这个变量的值为 0，则证明上一条命令正确执行；
             如果这 个变量的值为非 0 (具体是哪个数由命令自己来决定)，则证明上一条命令执行错误

$$           当前进程的进程号（PID)

$!           后台运行的最后一个进程的进程号（PID)

"$?"示例
[root@localhost sh]# ls
hello.sh  #ls命令正确执行
[root@localhost sh]# echo $?
0
变量"$?"返回一个0的值，说明上一条命令已经正确执行，如果执行错误"$?"会返回非0。 

"$$"示例
[root@localhost sh]# vi hello.sh
#!/bin/bash
echo "The current process is $$"
输出当前进程的PID

"$!"示例
find /root -name hello.sh &
使用find命令在/root目录下査找hello.sh文件，符号"&"的意思是把命令放入后台执行。
----------------------------
★环境变量（*）
对所有用户生效的环境变量（永久）  /etc/profile
对特定用户生效的环境变量（永久）  ~/.bashrc 或 ~/.bash_profile
临时有效的环境变量              脚本或命令行使用export

常用环境
----------------------------




