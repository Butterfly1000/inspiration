基本的一些知识前面已有提到，另外的也可以通过菜鸟教程进行了解。
精讲篇会更有针对性。
★变量删除与替换操作
$(变量名#匹配规则)   从变量开头始进行规则匹配，将符合的最短数据进行删除;
$(变量名##匹配规则)  从变量开头始进行规则匹配，将符合的最长数据进行删除;
$(变量名%匹配规则)   从变量结尾始进行规则匹配，将符合的最短数据进行删除;
$(变量名%%匹配规则)  从变量结尾始进行规则匹配，将符合的最长数据进行删除;
$(变量名/旧字符串/新字符串)   变量内容符合旧字符串，则第一个旧字符串替换成新字符串。
$(变量名//旧字符串/新字符串) 变量内容符合旧字符串，则所有旧字符串替换成新字符串。

演示：（注意*号的存在）
#!/bin/sh
sty='To be or not to be,this is a question';
sty_res=${sty#*be};
echo $sty_res;
结果:' or not to be,this is a question';

#!/bin/sh
sty='To be or not to be,this is a question';
sty_res=${sty##*be};
echo $sty_res;
结果:',this is a question'; (贪婪模式)

#!/bin/sh
sty='To be or not to be,this is a question';
sty_res=${sty%be*};
echo $sty_res;
结果:'To be or not to'; 

#!/bin/sh
sty='To be or not to be,this is a question';
sty_res=${sty%be*};
echo $sty_res;
结果:'To be or not to '; 

#!/bin/sh
sty='To be or not to be,this is a question';
sty_res=${sty%%be*};
echo $sty_res;
结果:'To ';(贪婪模式)

注:#必须搭配*be获取前面的数值，%必须搭配be*获取后面的数值。

#!/bin/sh
sty='To be or not to be , this is a question';
sty_res=${sty/be/being}
echo $sty_res;
结果:To being or not to be , this is a question

#!/bin/sh
sty='To be or not to be , this is a question';
sty_res=${sty//be/being}
echo $sty_res;
结果:To being or not to being , this is a question

★字符串处理
字符串长度
在初学篇（大概吧），我们提到字符串长度的计算方式{#str},
现在介绍另一种方式`expr length "$str"`;(注意:当字符串中有空格,双引号必须加,没有则不用)

match的使用
expr match $string substring命令在string字符串中匹配substring字符串，然后返回匹配到的substring字符串的长度，若找不到则返回0。
(缺点:这个方法就是substring一定要从$string的首字母开始相同，才可以匹配。)
sty='To be or not to be , this is a question';
echo `expr match "${sty}" "To be or not to"`; #有空格要用双引号
结果：15
echo `expr match "${sty}" "not to"`;
结果:0

计算字符串长度：
echo `expr match "${sty}" T.*`;#记住是.*
●总结:我们有三总计算长度的方法了,#,length,match。


对于抽取子串，在初学篇其实也有进行介绍，下面会进行更详细的介绍。
${str:pos}  从pos的位置开始匹配（pos为整形，从0开始）
${str:pos:len} 从pos的位置开始，匹配len长度
${str: -pos}    从右边开始匹配（知识点:-pos和:之间必须有空格）
${str:(pos)}   从左边开始匹配
`expr substr $str $pos $len` 从pos的位置开始，匹配len长度

















