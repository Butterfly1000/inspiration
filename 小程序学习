小程序开发文档:https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/code.html
1.json 后缀的 JSON 配置文件
JSON 是一种数据格式，并不是编程语言，在小程序中，JSON扮演的静态配置的角色。
/app.json #小程序配置
/project.config.json #工具配置
/pages/logs/logs.json #页面配置

app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。
pages字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。
window字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。

project.config.json
工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，
开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。

logs.json
这里的 page.json 其实用来表示 pages/logs 目录下的 logs.json 这类和小程序页面相关的配置。
如果你整个小程序的风格是蓝色调，那么你可以在 app.json 里边声明顶部颜色是蓝色即可。
实际情况可能不是这样，可能你小程序里边的每个页面都有不一样的色调来区分不同功能模块，page.json让开发者可以独立定义每个页面的一些属性，
例如刚刚说的顶部颜色、是否允许下拉刷新等等。

注意事项：
JSON 语法
JSON文件都是被包裹在一个大括号中 {}，通过key-value的方式来表达数据。JSON的Key必须包裹在一个双引号中，在实践中，编写 JSON 的时候，忘了给 Key 值加双引号或者是把双引号写成单引号是常见错误。

JSON的值只能是以下几种数据格式，其他任何格式都会触发报错，例如 JavaScript 中的 undefined。
1.数字，包含浮点数和整数
2.字符串，需要包裹在双引号中
3.Bool值，true 或者 false
4.数组，需要包裹在方括号中 []
5.对象，需要包裹在大括号中 {}
6.Null
★还需要注意的是 JSON 文件中无法使用注释，试图添加注释将会引发报错。

2.wxml 后缀的 WXML 模板文件
WXML 充当的就是类似 HTML 的角色

3.wxss 后缀的 WXSS 样式文件
WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。
提供了全局的样式和局部样式。和前边 app.json, page.json 的概念相同，你可以写一个 app.wxss 作为全局样式，会作用于当前小程序的所有页面，
局部页面样式 page.wxss 仅对当前页面生效。

4.js 后缀的 JS 脚本逻辑文件
逻辑交互

★写
{{ }} 变量放置
{{ a === 10? "变量 a 等于10": "变量 a 不等于10"}} #a为变量

条件逻辑：wx:if="{{condition}}"  
<view wx:if="{{length > 5}}"> 1 </view>
<view wx:elif="{{length > 2}}"> 2 </view>
<view wx:else> 3 </view>

列表渲染：wx:for="{{array}}"  默认：{{index}}键名 {{item}}键值
使用 wx:for-item 指定数组当前元素的变量名，使用 wx:for-index 指定数组当前下标的变量名：
<view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
  {{idx}}: {{itemName.message}}
</view>

如果列表中项目的位置会动态改变或者有新的项目添加到列表中，需要使用 wx:key 来指定列表中项目的唯一的标识符。
<switch wx:for="{{objectArray}}" wx:key="unique" > {{item.id}} </switch>
wx:key 的值以两种形式提供：
1.字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。
2.保留关键字 this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。
★作用：
当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，
以确保使组件保持自身的状态，并且提高列表渲染时的效率。

模板主要动态模板了解吧。

★引用
WXML 提供两种文件引用方式import和include。
import 
<import src="item.wxml"/>
需要注意的是 import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，
简言之就是 import 不具有递归的特性。

include
可以将目标文件中除了 <template/> <wxs/> 外的整个代码引入，相当于是拷贝到 include 位置

★共同属性（id，class，style这些相似就不列出了）
属性名         类型	        描述	         注解
hidden	      Boolean	      组件是否显示	  所有组件默认显示
data-*	      Any	          自定义属性	     组件上触发的事件时，会发送给事件处理函数
bind*/catch*	EventHandler	组件的事件

★WXML 数据绑定
注意点:1.变量名是大小写敏感的，也就是说 {{name}} 和 {{Name}} 是两个不同的变量。
      2.没有被定义的变量的或者是被设置为 undefined 的变量不会被同步到 wxml 中。

WXSS 样式
尺寸单位：引入了rpx（responsive pixel）尺寸单位。引用新尺寸单位的目的是，适配不同宽度的屏幕，开发起来更简单。
在CSS中，引用另一个样式文件：@import url('./test_0.css') 或 @import './test_0.wxss'
选择器：
类型	        选择器	    样例	         样例描述
类选择器	    .class	  .intro	       选择所有拥有 class="intro" 的组件
id选择器	     #id	     #firstname	    选择拥有 id="firstname" 的组件
元素选择器	   element	 view checkbox	选择所有文档的 view 组件和所有的 checkbox 组件
伪元素选择器	::after	  view::after	   在 view 组件后边插入内容
伪元素选择器	::before	view::before   在 view 组件前边插入内容



