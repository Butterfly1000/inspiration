★进程
进程，直观点说，保存在硬盘上的程序运行以后，会在内存空间里形成一个独立的内存体，这个内存体有自己独立的地址空间，有自己的堆，上级挂靠单位是操作系统。
操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。

【进程间通信（IPC）】：
管道(Pipe)、命名管道(FIFO)、消息队列(Message Queue) 、信号量(Semaphore) 、共享内存（Shared Memory）；套接字（Socket）。

★线程
线程，有时被称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位。

注意：进程和线程都是由操作系统内核所管理。进程是操作系统资源分配的最小单位，线程是操作系统调动执行的最小单位。

★区别：

调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；

并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；

拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。
         进程所维护的是程序所包含的资源（静态资源），如：地址空间，打开的文件句柄集，文件系统状态，信号处理handler等；
         线程所维护的运行相关的资源（动态资源），如：运行栈，调度相关的控制信息，待处理的信号集等；

系统开销：进程相比线程的缺点：
         在创建或撤消"进程"时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消"线程"时的开销。
         
         进程相比线程的优点：
         进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响。
         而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有隶属的线程全死掉。
         
         总结：
         所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。

★联系：
1.一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；

2.资源分配给进程，同一进程的所有线程共享该进程的所有资源；

3.处理机分给线程，即真正在处理机上运行的是线程；

4.线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。

★形象例子环节
一个双向多车道的道路，假如我们把整条道路看成是一个“进程”的话，那么由白色虚线分隔开来的“各个车道”就是进程中的各个“线程”了。

这些线程(车道)共享了进程(道路)的公共资源(土地资源)。

这些线程(车道)必须依赖于进程(道路)，也就是说，线程不能脱离于进程而存在(就像离开了道路，车道也就没有意义了)。

这些线程(车道)之间可以并发执行(各个车道你走你的，我走我的)，也可以互相同步(某些车道在交通灯亮时禁止继续前行或转弯，必须等待其它车道的车辆通行完毕)。

这些线程(车道)之间依靠代码逻辑(交通灯)来控制运行，一旦代码逻辑控制有误(死锁，多个线程同时竞争唯一资源)，那么线程将陷入混乱，无序之中。

这些线程(车道)之间谁先运行是未知的，只有在线程刚好被分配到CPU时间片(交通灯变化)的那一刻才能知道。

★进程/线程之间的亲缘性
亲缘性的意思是进程/线程只在某个cpu上运行（多核系统），比如：
BOOL WINAPI SetProcessAffinityMask(
  _In_ HANDLE    hProcess,
  _In_ DWORD_PTR dwProcessAffinityMask
);
/*
dwProcessAffinityMask 如果是 0 , 代表当前进程只在cpu0 上工作;
如果是 0x03 , 转为2进制是 00000011 . 代表只在 cpu0 或 cpu1上工作;
*/

使用CPU亲缘性的好处：设置CPU亲缘性是为了防止进程/线程在CPU的核上频繁切换，从而避免因切换带来的CPU的L1/L2 cache失效，cache失效会降低程序的性能。

★协程

协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。
好处：性能得到了很大的提升，不会像线程切换那样消耗资源。

子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。
所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。

协程在子程序内部是可中断的，然后转而执行别的子程序，在适当的时候再返回来接着执行。



————————————————
原文链接：https://blog.csdn.net/daaikuaichuan/java/article/details/82951084
