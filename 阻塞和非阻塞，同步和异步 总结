1 例子
故事：老王烧开水。
出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。

老王想了想，有好几种等待方式

1.老王用水壶煮水，并且站在那里，不管水开没开，每隔一定时间看看水开了没。  －同步阻塞


老王想了想，这种方法不够聪明。

2.老王还是用水壶煮水，不再傻傻的站在那里看水开，跑去寝室上网，但是还是会每隔一段时间过来看看水开了没有，水没有开就走人。 －同步非阻塞


老王想了想，现在的方法聪明了些，但是还是不够好。

3.老王这次使用高大上的响水壶来煮水，站在那里，但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他。 －异步阻塞


老王想了想，不会呀，既然水壶可以通知我，那我为什么还要傻傻的站在那里等呢，嗯，得换个方法。

4.老王还是使用响水壶煮水，跑到客厅上网去，等着响水壶自己把水煮熟了以后通知他。－异步非阻塞


老王豁然，这下感觉轻松了很多。
-------------------------------->

同步和异步
同步就是烧开水，需要自己去轮询（每隔一段时间去看看水开了没），异步就是水开了，然后水壶会通知你水已经开了，你可以回来处理这些开水了。
同步和异步可以理解成是对请求（/调用）接口，请求发出后，是否需要等待结果，才能继续执行其他操作。同步则是在请求后，等待结果返回才继续
执行其他操作。异步则是在请求后，可以继续执行其他操作，等待结果返回通知再去处理。

阻塞和非阻塞
阻塞就是说在煮水的过程中，你不可以去干其他的事情，非阻塞就是在同样的情况下，可以同时去干其他的事情。阻塞和非阻塞是相对于线程是否被阻塞。

其实，这两者存在本质的区别，它们的修饰对象是不同的。
阻塞和非阻塞这两个概念,与程序（进程/线程）访问的数据等待消息通知(无所谓同步或者异步)时的状态有关。也就是说阻塞与非阻塞主要是程序等待消息通知时
的状态角度来说的。简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。

而同步和异步是指访问数据的机制,同步一般指主动请求并等待I/O操作完毕的方式,当数据就绪后在读写的时候必须阻塞,
异步则指主动请求数据后便可以继续处理其它任务,随后等待I/O,操作完毕的通知,这可以使进程在数据读写时也不阻塞。

★虽然，不一定非常准确，但可以先这样记忆。
阻塞和非阻塞  与  同步和异步 的区别和相似点：
相似点：阻塞和同步都是专心等待结果，有结果了，才去做其他的活。
       非阻塞和异步都是触发了然后就去做其他事情，等对方通知结果返回了，再去处理。
       
区别：修饰的对象不同，
     同步和异步可以理解是请求(/访问)数据接口，等待结果，更侧重在对"请求"这个动作的结果等待。
     阻塞和非阻塞则是程序（进程/线程）执行（/访问）等待消息通知，更侧重在对"程序内部执行"结果等待。
     阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。
     
     一个针对的是对“请求”等待结果状态的处理方式（比如：老张去查看水开了没？查看这个"请求"动作），
     一个针对的是对“程序”等待结果状态的处理方式（比如：老张是否在一直等待水开这个结果完成？针对等待水开这个“程序”）。
     
--------------------------     
补充内容：
★并发并行
并发：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在
     处理机上运行。当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将
     时间段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。

并行：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，
     这种方式我们称之为并行(Parallel)。
     
个人简介总结和理解：首先，我们要知道，一个CPU在只能处理一个程序。多进程这种情况，CPU并不是在同一个时间完成多个进程内容，而是分为时段，一个个完成，
                  为什么我们没有发觉？因为，CPU处理速度很快，而每个时间段的单位其实很小，这种轮询的情况下，用户很难发觉。
                  
                  这种情况下，一个CPU通过划分为多个时间段，完成多进程任务或多线程任务，称为并发。
                  而有服务器多个CPU（多核）,多个CPU同时处理任务（这边的多个只2个及以上，并不一定是全部），称为并行。
                  简单说，并发是要抢CPU资源的，并行不需要。
                  
★异步和多线程区别？
那还是10年前，还没有12306的年代，大家买票只能去火车站买。因为大家都要过年回家，都还不想等，火车站只有一个，窗口只有那么多，头疼啊。更头疼的是，
排到窗口的那个人，各种挑剔，不要贵的，不要晚上的，不要站票......跟售票员各种墨迹，后面的人更加着急，一个个义愤填膺，骂爹骂娘。

现在假设整个城市就只有1个火车，1个售票员，每个乘客咨询售票员后需要思考1分钟再决定买哪趟车的票。

1.异步：在买票的人咨询后，需要思考1分钟，马上靠边站，但不用重新排队，什么时候想清楚可以立马去跟售票员去买票。在该人站在旁边思考的时候，
       后面的人赶紧上去接着买。这时候队伍是很快的挪动的，没有阻塞，售票员的最大化的效率。
       （售票员"请求"买票人意见,需要思考则到一遍排队，想好了再通知售票员（异步）,这样下一个购买者可以直接上前。）
       
2.多线程：火车站开n个窗口（但还是只有一个人售票），外面同时排n个队，售票员回答咨询者问题后，立马马上去下个窗口，然后继续轮换到下个窗口.....
         哪个窗口的人决定好了，售票员立马过去买给他。这个时候乘客比较简单，但万一那个队伍有人思考半天纠结，后面的人就悲剧了。
         （开多个窗口，可以让多个人到窗口前思考，想好了通知售票员，售票员进行售票）

3.并行：复制n个火车站，同时卖票，买票能力大大增强。大家也可以哪个火车站人少，就去那个买票。

可见：在只有一个火车站，且只有一个售票员的情况下，卖完一个再卖一个就会导致资源浪费，效率低下，队伍卡死，很难往前挪动。
     1,2优化的办法都解决了队伍不动，售票率低下的问题。但增加火车站，增加窗口，增加售票员才是好办法。

总结：
这两个概念拿来对比也有点不合适，因为他们不是一个概念，多线程的目的还是为了实现异步，多线程应该是一种实现异步的手段。异步应该去跟同步比较才对。

参考文章：
https://www.cnblogs.com/George1994/p/6702084.html #阻塞和非阻塞，同步和异步 总结
https://www.cnblogs.com/mhq-martin/p/9035640.html #15分钟读懂进程线程、同步异步、阻塞非阻塞、并发并行



