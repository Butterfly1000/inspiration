https://www.runoob.com/php/php-oop.html 菜鸟教程详解
★以下是个人理解仅供参考：
对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。

个人理解:对象，就是物。比如说车，灯，椅子等等。
把握对象的主要三个特性：
对象的行为：做了什么？小A举手;关灯。
对象的形态：长相如何？小A的升高，体重，样貌;灯的形状，颜色。
对象的表示：身份和特点。

比如 Animal(动物) 是一个抽象类，我们可以具体到一只狗跟一只羊，而狗跟羊就是具体的对象，他们有颜色属性，可以写，可以跑等行为状态。
上面这句话，个人理解，如果你可以像对象一样归类(行为，形态，表示)，那么就是具体的对象。如果不能就是抽象类，但抽象类可以包含具体的对象。

面向对象内容
类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。

对象 − 是类的实例。

成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。

成员函数 − 定义在类的内部，可用于访问对象的数据。

继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，
把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。

父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类。

子类 − 一个类继承其他类称为子类，也可称为派生类。

多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。

重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。

抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些
无关内容。任何类的划分都是主观的，但必须与具体的应用有关。

封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。

构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。

析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数
往往用来做"清理善后" 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。

举例论证：
类（动物），动物其实是一种抽象性描述。当然它包括动物的形态特征以及动物的行为特点。(class {})

对象(猫)，这个步骤是实例化,实例化其实就是开始具象，将类的具体的表现为一个对象。猫是动物的一种，当到了猫，我们就可以总结一些更具体的行为和形态。
(new)

成员变量 猫的形态（但这种表述并不十分准确）

成员函数 猫的行为（但这种表述并不十分准确）

继承（PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承），父类，子类就不多说了，字面上的意思，但要注意的几点:
1.PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承
2.方法重写,如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
3.访问控制。public(公共的) ：不解释; protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问;
private（私有）：私有的类成员则只能被其定义所在的类访问。

构造函数 初始对象 __construct()

析构函数 结束时触发，一般用于释放空间 __destruct()

接口
这个内容可以参考我的详解php中的implements使用(接口)篇中内容。

抽象类
任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。定义为抽象的类不能被实例化。
被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。

继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；
另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，
那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。
此外，子类方法可以包含父类抽象方法中不存在的可选参数。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则也是可以正常运行的。
(学习完接口似乎更好理解)

总结，父类为抽象类(只要类中一个方法为抽象方法，就必须为抽象类)，继承抽象类，注意：抽象类的方法都要有，方法参数可多不可少，访问控制能松不能紧。

<?php
//因为有abstract抽象方法，所以累前面必须声明abstract。
abstract class BaseClass {
   function __construct() {
       print "BaseClass 类中构造方法" . PHP_EOL;
   }
   
   //抽象方法，在父类的抽象方法不能用{}花括号定义内容。子类必须有，且要注意访问控制(public)。
   abstract public function a();
   
   //普通方法，父类可以用花括号定义内容。子类不需要一定有，且子类可以重写。
   public function b(){
	   
   }
}

这边很多人可能有疑问，那我们为什么要用抽象类？


★Static 关键字
声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。
静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。
由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。
静态属性不可以由对象通过 -> 操作符来访问。
自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static。

Final 关键字（了解）
PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。

调用父类构造方法
PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct() 。
解释:这个应该这样理解，子类是否有用构造方法，没有则会继承并触发父类的构造方法，有的话则会不会，要触发必须调用parent::__construct()。
















